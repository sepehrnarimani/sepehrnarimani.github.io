<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://sepehrnarimani.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://sepehrnarimani.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-01-24T18:54:10+00:00</updated><id>https://sepehrnarimani.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">CLI App in C</title><link href="https://sepehrnarimani.github.io/blog/2024/cli/" rel="alternate" type="text/html" title="CLI App in C"/><published>2024-01-11T15:09:00+00:00</published><updated>2024-01-11T15:09:00+00:00</updated><id>https://sepehrnarimani.github.io/blog/2024/cli</id><content type="html" xml:base="https://sepehrnarimani.github.io/blog/2024/cli/"><![CDATA[<p>here, I post my code to create a simple CLI in C programming language:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="k">enum</span> <span class="n">whichOperation</span>
<span class="p">{</span>
    <span class="n">FACTORIEL</span><span class="p">,</span>
    <span class="n">POWER</span><span class="p">,</span>
    <span class="n">BYE</span>
<span class="p">};</span>
<span class="kt">int</span> <span class="nf">factoriel</span><span class="p">(</span><span class="kt">int</span> <span class="n">input</span><span class="p">);</span>
<span class="kt">int</span> <span class="nf">powerOperation</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">power</span><span class="p">);</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
    <span class="k">enum</span> <span class="n">whichOperation</span> <span class="n">operation</span><span class="p">;</span>
    <span class="k">do</span>
    <span class="p">{</span>

        <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
        <span class="k">switch</span> <span class="p">(</span><span class="n">n</span><span class="p">)</span>
        <span class="p">{</span>
        <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">operation</span> <span class="o">=</span> <span class="n">FACTORIEL</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>

        <span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
            <span class="n">operation</span> <span class="o">=</span> <span class="n">POWER</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>

        <span class="k">case</span> <span class="mi">3</span><span class="p">:</span>
            <span class="n">operation</span> <span class="o">=</span> <span class="n">BYE</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="kt">int</span> <span class="n">input</span> <span class="p">,</span> <span class="n">n</span> <span class="p">,</span> <span class="n">power</span><span class="p">;</span>

        <span class="k">switch</span> <span class="p">(</span><span class="n">operation</span><span class="p">)</span>
        <span class="p">{</span>
        <span class="k">case</span> <span class="n">FACTORIEL</span><span class="p">:</span>
            <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">input</span><span class="p">);</span>
            <span class="kt">int</span> <span class="n">fac</span> <span class="o">=</span> <span class="n">factoriel</span><span class="p">(</span><span class="n">input</span><span class="p">);</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">fac</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>

        <span class="k">case</span> <span class="n">POWER</span><span class="p">:</span>
            <span class="n">scanf</span><span class="p">(</span><span class="s">"%d %d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">power</span><span class="p">);</span>
            <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">powerOperation</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">power</span><span class="p">);</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>

        <span class="k">case</span> <span class="n">BYE</span><span class="p">:</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>

    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">operation</span> <span class="o">!=</span> <span class="n">BYE</span><span class="p">);</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"Bye"</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">factoriel</span><span class="p">(</span><span class="kt">int</span> <span class="n">input</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">input</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">result</span> <span class="o">*=</span> <span class="n">i</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">powerOperation</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">power</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">power</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">result</span> <span class="o">*=</span> <span class="n">n</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[an example of a CLI]]></summary></entry><entry><title type="html">find average</title><link href="https://sepehrnarimani.github.io/blog/2024/average/" rel="alternate" type="text/html" title="find average"/><published>2024-01-10T15:12:00+00:00</published><updated>2024-01-10T15:12:00+00:00</updated><id>https://sepehrnarimani.github.io/blog/2024/average</id><content type="html" xml:base="https://sepehrnarimani.github.io/blog/2024/average/"><![CDATA[<p>In this we are tryng to find average of differnet values with different amounts. for example, we have 3 type of students. the average score of 18 <code class="language-plaintext highlighter-rouge">m</code> students is 20.the average score of <code class="language-plaintext highlighter-rouge">x</code> students is 18 and average score of <code class="language-plaintext highlighter-rouge">y</code> students is 16. to find the average of score in these situations, we can use this formula: \((\sum_{k=1}^\infty x_k * f_k) / \sum_{k=1}^\infty f_k\)</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="average,"/><category term="math"/><summary type="html"><![CDATA[finding averge of n values]]></summary></entry><entry><title type="html">SSL/TLS description</title><link href="https://sepehrnarimani.github.io/blog/2024/sslimage/" rel="alternate" type="text/html" title="SSL/TLS description"/><published>2024-01-05T21:01:00+00:00</published><updated>2024-01-05T21:01:00+00:00</updated><id>https://sepehrnarimani.github.io/blog/2024/sslimage</id><content type="html" xml:base="https://sepehrnarimani.github.io/blog/2024/sslimage/"><![CDATA[<p>Transport Layer Security (TLS) is a cryptographic protocol designed to provide communications security over a computer network. The protocol is widely used in applications such as email, instant messaging, and voice over IP, but its use in securing HTTPS remains the most publicly visible.</p> <p>The TLS protocol aims primarily to provide security, including privacy (confidentiality), integrity, and authenticity through the use of cryptography, such as the use of certificates, between two or more communicating computer applications. It runs in the presentation layer and is itself composed of two layers: the TLS record and the TLS handshake protocols.</p> <p>The closely related Datagram Transport Layer Security (DTLS) is a communications protocol that provides security to datagram-based applications. In technical writing, references to “(D)TLS” are often seen when it applies to both versions.</p> <p>TLS is a proposed Internet Engineering Task Force (IETF) standard, first defined in 1999, and the current version is TLS 1.3, defined in August 2018. TLS builds on the now-deprecated SSL (Secure Sockets Layer) specifications (1994, 1995, 1996) developed by Netscape Communications for adding the HTTPS protocol to their Navigator web browser.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ssl1-480.webp 480w,/assets/img/ssl1-800.webp 800w,/assets/img/ssl1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/ssl1.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ssl2-480.webp 480w,/assets/img/ssl2-800.webp 800w,/assets/img/ssl2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/ssl2.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>TLS 1.2 was defined in RFC 5246 in August 2008.[23] It is based on the earlier TLS 1.1 specification. Major differences include:</p> <p>The MD5 and SHA-1 combination in the pseudorandom function (PRF) was replaced with SHA-256, with an option to use cipher suite specified PRFs. The MD5 and SHA-1 combination in the finished message hash was replaced with SHA-256, with an option to use cipher suite specific hash algorithms. However, the size of the hash in the finished message must still be at least 96 bits. The MD5 and SHA-1 combination in the digitally signed element was replaced with a single hash negotiated during handshake, which defaults to SHA-1. Enhancement in the client’s and server’s ability to specify which hashes and signature algorithms they accept. Expansion of support for authenticated encryption ciphers, used mainly for Galois/Counter Mode (GCM) and CCM mode of Advanced Encryption Standard (AES) encryption. TLS Extensions definition and AES cipher suites were added. All TLS versions were further refined in RFC 6176 in March 2011, removing their backward compatibility with SSL such that TLS sessions never negotiate the use of Secure Sockets Layer (SSL) version 2.0. There is currently no formal date for TLS 1.2 to be deprecated.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ssl3-480.webp 480w,/assets/img/ssl3-800.webp 800w,/assets/img/ssl3-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/ssl3.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ssl4-480.webp 480w,/assets/img/ssl4-800.webp 800w,/assets/img/ssl4-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/ssl4.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="sample-posts"/><category term="ssl,"/><category term="tls"/><summary type="html"><![CDATA[summary about SSL/TLS]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://sepehrnarimani.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://sepehrnarimani.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://sepehrnarimani.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry></feed>